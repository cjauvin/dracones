# To install Dracones Core:
#
# (1) Move this file in the proper location:
#         on Windows using MS4W: <ms4w_location>/httpd.d/
#         on Linux: /etc/apache2/sites-available/
# (2) Replace all the "<dracones_core_location>" by the Dracones Core codebase absolute path
# (3) On Linux, do: a2ensite httpd_dracones_core.conf
# (4) Restart Apache
#
# On Linux: uncomment the following directive:
#Alias /ms_tmp /var/www/tmp/ms_tmp
# And execute these commands as root: 
#    mkdir /var/www/tmp
#    mkdir /var/www/tmp/ms_tmp
#    chown -R www-data:www-data /var/www/tmp
#
# Altough it doesn't need to be servable, don't forget to create a tmp directory for Pesto 
# sessions at the same place:
#    mkdir /var/www/tmp/pesto_tmp
#    chown -R www-data:www-data /var/www/tmp

# Because the Alias directive takes precedence over WSGIScriptAlias, we use the solution #2 described at: 
# http://serverfault.com/questions/59791/configure-apache-to-handle-a-sub-path-using-wsgi
Alias /dracones_core/dracones_do <dracones_core_location>/python/dracones/web_interface.py
Alias /dracones_core <dracones_core_location>

<Directory <dracones_core_location> >
  WSGIApplicationGroup %{GLOBAL}
  AddHandler wsgi-script .py
  Options ExecCGI -Indexes FollowSymLinks Multiviews  
  Order allow,deny
  Allow from all
</Directory>

# When creating new Dracones application requiring additional path locations,
# append them to this WSGIPythonPath directive below (instead of creating new ones in other conf files) to 
# avoid conflicting Dracones Python paths. On Windows, use ";" as the separator, on Linux use ":".
WSGIPythonPath <dracones_core_location>/python
